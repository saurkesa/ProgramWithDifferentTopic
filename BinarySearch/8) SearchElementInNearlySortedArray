/*
Given an array which is sorted, but after sorting some elements are moved to either of the adjacent positions,
i.e., arr[i] may be present at arr[i+1] or arr[i-1]. Write an efficient function to search an element 
in this array. Basically the element arr[i] can only be swapped with either arr[i+1] or arr[i-1].*/

// output 4

public class SearchElementInNearlySortedArray {
	private static int searchElementInNearlySortedArray(int[] arr, int element) {

		int start = 0;
		int end = arr.length - 1;

		while (start <= end) {
			int mid = start + (end - start) / 2;

			if (arr[mid] == element) {
				return mid;
			} else if (mid - 1 >= start && arr[mid - 1] == element) {
				return mid - 1;
			} else if (arr[mid + 1] == element && mid + 1 <= end) {
				return mid + 1;
			} else if (element > arr[mid]) {
				start = mid + 2;
			} else {
				end = mid - 2;
			}
		}
		return -1;
	}

	public static void main(String[] args) {

		int[] arr = { 5, 10, 30, 20, 40 };

		int element = 40;

		System.out.println(searchElementInNearlySortedArray(arr, element));

	}

}
